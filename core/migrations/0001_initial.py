# Generated by Django 2.1.1 on 2018-12-05 12:53

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BlackList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='ConfigurationModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wait_time', models.PositiveIntegerField(default=3)),
                ('scroll_count', models.PositiveIntegerField(default=1)),
                ('scroll_delay', models.PositiveIntegerField(default=1)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DeviceModel',
            fields=[
                ('device_id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('vendor', models.CharField(default='vendor', max_length=30)),
                ('model', models.CharField(default='model', max_length=30)),
                ('android_version', models.CharField(default='android', max_length=10)),
                ('current_owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DeviceStatisticModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scrapes_count', models.PositiveIntegerField(default=0)),
                ('complains_count', models.PositiveIntegerField(default=0)),
                ('is_blocked', models.BooleanField(default=False)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.DeviceModel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DomainModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostname', models.CharField(max_length=255)),
                ('configuration', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.ConfigurationModel')),
            ],
        ),
        migrations.CreateModel(
            name='IPAddressModel',
            fields=[
                ('ip_address', models.GenericIPAddressField(primary_key=True, serialize=False)),
                ('rate_type', models.CharField(choices=[('unlimited', 'Unlimited'), ('daily', 'Per day'), ('hourly', 'Per hour')], default='unlimited', max_length=10)),
                ('rate_limit', models.PositiveIntegerField(default=1000)),
            ],
        ),
        migrations.CreateModel(
            name='IPConnectionModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.DomainModel')),
                ('ip_address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.IPAddressModel')),
            ],
        ),
        migrations.CreateModel(
            name='IPRateRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate_type', models.CharField(choices=[('unlimited', 'Unlimited'), ('daily', 'Per day'), ('hourly', 'Per hour')], default='unlimited', max_length=10)),
                ('rate_limit', models.PositiveIntegerField(default=1000)),
            ],
        ),
        migrations.CreateModel(
            name='ScrapComplainModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(default='Bad scrap', max_length=300)),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('from_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sender', to=settings.AUTH_USER_MODEL)),
                ('on_device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.DeviceModel')),
                ('on_ip_address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.IPAddressModel')),
                ('on_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='receiver', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Scraper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tokens', models.PositiveIntegerField(default=0)),
                ('scrapes', models.PositiveIntegerField(default=0)),
                ('complains', models.PositiveIntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ScrapModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.BinaryField()),
                ('url_value', models.CharField(max_length=255)),
                ('upload_date', models.DateTimeField(auto_now_add=True)),
                ('complained', models.BooleanField(default=False)),
                ('ip_address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.IPAddressModel')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner', to=settings.AUTH_USER_MODEL)),
                ('scraper_device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.DeviceModel')),
                ('scraper_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TokenRuleChainModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='TokenRuleModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_scrapes_count', models.IntegerField(default=0)),
                ('to_scrapes_count', models.IntegerField(default=-1)),
                ('scrapes_per_token', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='UrlModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField()),
                ('status', models.CharField(choices=[('no', 'Not scraped'), ('in', 'Scraping in progress'), ('do', 'Already scraped')], default='no', max_length=2)),
                ('pool', models.CharField(choices=[('pub', 'Public'), ('priv', 'Private')], default='priv', max_length=4)),
                ('scrap_start_time', models.DateTimeField(default=None, null=True)),
                ('configuration', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.ConfigurationModel')),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.DomainModel')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='tokenrulechainmodel',
            name='token_rules',
            field=models.ManyToManyField(to='core.TokenRuleModel'),
        ),
        migrations.AddField(
            model_name='scrapmodel',
            name='url',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.UrlModel'),
        ),
        migrations.AddField(
            model_name='scrapcomplainmodel',
            name='scrap',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.ScrapModel'),
        ),
        migrations.AddField(
            model_name='domainmodel',
            name='ip_rate_rule',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.IPRateRule'),
        ),
        migrations.AddField(
            model_name='domainmodel',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='devicemodel',
            name='used_ip_addresses',
            field=models.ManyToManyField(to='core.IPAddressModel'),
        ),
        migrations.AddField(
            model_name='blacklist',
            name='devices',
            field=models.ManyToManyField(to='core.DeviceModel'),
        ),
        migrations.AddField(
            model_name='blacklist',
            name='domain',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.DomainModel'),
        ),
        migrations.AddField(
            model_name='blacklist',
            name='ip_addresses',
            field=models.ManyToManyField(to='core.IPAddressModel'),
        ),
        migrations.CreateModel(
            name='Complain',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('core.scrapcomplainmodel',),
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('core.devicemodel',),
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('core.domainmodel',),
        ),
        migrations.CreateModel(
            name='IPAddress',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('core.ipaddressmodel',),
        ),
        migrations.CreateModel(
            name='IPConnection',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('core.ipconnectionmodel',),
        ),
        migrations.CreateModel(
            name='Scrap',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('core.scrapmodel',),
        ),
        migrations.CreateModel(
            name='TokenRuleChain',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('core.tokenrulechainmodel',),
        ),
        migrations.CreateModel(
            name='Url',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('core.urlmodel',),
        ),
        migrations.AlterUniqueTogether(
            name='domainmodel',
            unique_together={('owner', 'hostname')},
        ),
    ]
